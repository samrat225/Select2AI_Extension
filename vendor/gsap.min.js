// This minimal shim enables basic .fromTo/.to animations on opacity/translateY.
// For production, download gsap.min.js and replace this file content.
;(() => {
  if (window.gsap) return
  function tween(el, from, to, dur, cb) {
    const start = performance.now()
    const init = {}
    const end = {}
    const get = (v, key) => (typeof v[key] === "number" ? v[key] : Number.parseFloat(String(v[key] || "0")))
    if (from) {
      if ("opacity" in from) el.style.opacity = from.opacity
      if ("y" in from) el.style.transform = `translateY(${from.y}px)`
    }
    if (to) {
      if ("opacity" in to) end.opacity = to.opacity
      if ("y" in to) end.y = to.y
    }
    const startOpacity = get({ opacity: Number.parseFloat(getComputedStyle(el).opacity) }, "opacity")
    const startY = (getComputedStyle(el).transform || "").includes("matrix")
      ? Number.parseFloat(getComputedStyle(el).transform.split(",")[5]) || 0
      : 0
    const deltaOpacity = (end.opacity ?? startOpacity) - startOpacity
    const deltaY = (end.y ?? startY) - startY

    function step(ts) {
      const t = Math.min(1, (ts - start) / (dur * 1000))
      el.style.opacity = String(startOpacity + deltaOpacity * t)
      el.style.transform = `translateY(${startY + deltaY * t}px)`
      if (t < 1) requestAnimationFrame(step)
      else if (cb) cb()
    }
    requestAnimationFrame(step)
  }
  window.gsap = {
    fromTo(el, fromVars, toVars) {
      const dur = toVars.duration || 0.2
      tween(el, fromVars, toVars, dur, toVars.onComplete)
    },
    to(el, toVars) {
      const dur = toVars.duration || 0.2
      tween(el, null, toVars, dur, toVars.onComplete)
    },
  }
})()
